summary(wifiMod1)
ggplot(wifi, aes(x=x, y=y, color = Distance)) + geom_point() +
scale_color_gradient2(low ="blue", mid = "white", high ="red",
midpoint = mean(wifi$Distance)) +
geom_point(data = as.data.frame(t(coef(wifiMod1))), aes(x=betaX, y = betaY),
size = 5, color = "green" )
wifiMod1 <- nls(Distance ~ sqrt((betaX - x)^2 + (betaY - y)^2), data = wifi,
start= list(betaX = 100, betaY = 30))
summary(wifiMod1)
wifiMod1 <- nls(Distance ~ sqrt((betaX - x)^2 + (betaY - y)^2), data = wifi,
start= list(betaX = 50, betaY = 50))
summary(wifiMod1)
data("diamonds")
diaSpline1 <- smooth.spline(x = diamonds$carat, y = diamonds$price)
diaSpline1 <- smooth.spline(x = diamonds$carat, y = diamonds$price, df = 10)
diaSpline1 <- smooth.spline(x = diamonds$carat, y = diamonds$price, df = 100)
library(dplyr)
get.spline.info <- function(object)
{
data.frame(x = object$x, y = object$y, df = object$df)
}
# --- Plotting Ethiopia ESS (LSMS) panel data for map products
# Date: 2015.06
# By: Tim Essam, Phd
# For: USAID GeoCenter
# --- Clear workspace, set library list
remove(list = ls())
libs <- c ("ggplot2", "dplyr", "RColorBrewer", "leaflet")
# --- Load required libraries
lapply(libs, require, character.only=T)
install.packages("viridis")
library(viridis)
library("Viridis")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("sjmgarnier/viridis")
library(viridis)
library(hexbin)
dat <- within(data.frame(x = rnorm(10000), y = rnorm(10000)), {
Distance <- sqrt(x^2 + y^2)
})
ggplot(dat, aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_gradientn(colours = viridis(256))
library(ggplot2)
ggplot(dat, aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_gradientn(colours = viridis(256))
ggplot(dat, aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_gradientn(colours = viridis(100))
ggplot(dat, aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_gradientn(colours = viridis(10))
ggplot(dat, aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_gradientn(colours = viridis())
ggplot(dat, aes(x = x, y = y)) +
geom_hex() + coord_fixed() +
scale_fill_gradientn(colours = viridis(300))
install.packages(c("animation", "arm", "base64enc", "BH", "cairoDevice", "car", "chron", "colorspace", "curl", "DEoptimR", "devtools", "diptest", "DT", "dtw", "dygraphs", "e1071", "effects", "evaluate", "fields", "formatR", "Formula", "fpc", "gdata", "geoR", "ggdendro", "ggmap", "ggthemes", "ggvis", "gmodels", "googleVis", "gridExtra", "gstat", "hexbin", "highr", "Hmisc", "htmlwidgets", "httpuv", "httr", "igraph", "installr", "intervals", "jsonlite", "kernlab", "knitr", "lme4", "manipulate", "mapproj", "maps", "maptools", "markdown", "mclust", "metricsgraphics", "mime", "multcomp", "mvtnorm", "networkD3", "packrat", "pitchRx", "plyr", "pROC", "proxy", "psych", "quantreg", "R.utils", "R6", "RandomFields", "raster", "rattle", "Rcpp", "RcppEigen", "RCurl", "rgdal", "rJava", "rlist", "rmarkdown", "robustbase", "roxygen2", "rstudioapi", "sandwich", "scales", "shiny", "sp", "spacetime", "SparseM", "splancs", "stringi", "stringr", "testthat", "tidyr", "treemap", "verification", "XML", "zoo"))
# Hand on programming with R
# Date and times
now  <- Sys.time()
now
typeof(now)
class(now)
unclass(now)
source('~/.active-rstudio-document', echo=TRUE)
mil
now
gender <- factor*c("male", "female", "female", "male")
gender <- factor*c("male", "female", "female", "male")
source('~/.active-rstudio-document', echo=TRUE)
gender
typeof(gender)
attributes(gender)
unclass(gender)
as.character(gender)
card <- c("ace", "hearts", 1)
str(card)
card2  <- c("TRUE", "FALSE", 0, 10)
str(card2)
card2  <- c(TRUE, FALSE, 0, 10)
str(card2)
sum(card2)
list1 <- list(100:130, "R", list(TRUE, FALES))
list1 <- list(100:130, "R", list(TRUE, FALSE))
list1
list.cards <- list(1, "ace", "hearts")
list.cards
list.cards <- list("ace", "hearts", 1)
df <- data.frame(face = c("ace", "two", "six"), suit = c("clubs", "clubs", "clubs"), value = c(1, 2, 6))
type(df)
typeof(Df)
typeof(df)
str(df)
class(df)
url <- c("https://raw.githubusercontent.com/shifteight/R/master/HandsOn/deck.csv")
d <- read.csv(url)
View(d)
View(d)
str(d)
head(d)
d(1, 1:3)
d[1, 1:3]
d[1, ]
d[1, :]
d[c(1,1) , ]
d[c(1, 2), c(1,2)]
names(d)
deck[, "suit"]
d[, "suit"]
deal <- function(cards) {
cards[1, ]
}
deal(d)
deck2 <- d[1:52, ]
random <- sample(1:52, size = 52)
random
deck4 <- d[random, ]
head(deck4)
deck4 <- d[random, ]
head(deck4)
deck4 <- d[random, ]
head(deck4)
deal <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal(d)
deal(d)
head(deal(d))
head(deal(d))
shuffle <- function(cards){
random <- sample(1:52, size = 52)
cards[random, ]
}
deak(d)
deal(d)
head(deal(d))
deck2 <- shuffle(d)
head(deal(deck2))
head(deal(deck2))
head(deal(deck2))
d$value
mean(d$value)
median(d$value)
deck2 <- d
deck2$new <- 1:52
x <- c(F, T, F)
sum(x)
as.numeric(x)
mean(x)
x <- list(1:3, "A", c(T, F, T), c(2.9, 5.9))
x
str(x)
x <- list(list(list(list())))
x
str(x)
is.recursive(x)
?is.recursive()
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(X)
x
str(X)
str(x)
str(y)
typeof(y)
is.list(mtcars)
md <- lm(mpg ~ wt, data = mtcars)
is.list(md)
md
c(1, f)
c(1, F)
c("a", 1)
c(list(1), "a")
str(c(list(1), "a"))
c(T, 1L)
search
list
list()
ls()
md
x
unlist(x)
unlist(x)[1]
unlist(x)[2]
unlist(x)[4]
x
str(x)
c(F, NA_character_)
y <- 1:10
attr(y, "my_attribute") <-"This is a vector"
attr(y, "my_attribute")
attributes(y)
str(attributes(y))
structure(1:10, my_attribute = "This is a vector")
attributes(y[1])
names(y)
dim(y)
y
class(y)
attr(y, "dim")
dim(y)
ls()
x <- c(a = 1, b = 2, c = 3)
x
x <- 1:3; names(x) <- c("a", "b", "c")
x
x <- factor(c("a", "b", "c", "d"))
x
class(x)
levels(x)
x[2] <- "e"
sex_char <- c("m")
sex_char <- c("m", "m", "m")
sex_char
sex_char <- factor(sex_char, levels = c("m", "f"))
sex_char
table(sex_char)
table(sex_factor)
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_factor)
?structure()
structure(1:6, dim = 2:3)
?comment()
help(rev)
x <- c(1:5, 5:3)
x
rev(x)
a <- matrix(1:5, ncol = 3, nrow = 2)
a <- matrix(1:6, ncol = 3, nrow = 2)
a
x <- c(2.1, 4.2, 3.3, 5.4)
x
x[c(1, 3)]
x[order(X)]
x[order(x)]
x[-c(1, 3)]
x[x>3]
x[x>==3]
x[x==3]
x[x==3.3]
x[]
x[0]
y <- setNames(x, letters[1:4)
y <- setNames(x, letters[1:4])
y
x
mtcars[mtcars$cyl == 4]
mtcars[mtcars$cyl = 4]
View(mtcars)
mtcars[mtcars$cyl == 4]
View(mtcars)
table(mtcars$cyl)
mtcars[mtcars$cyl == 4, ]
mtcars[1:$]
mtcars[1:4]
mtcars[mtcars$cyl <= 4, ]
mtcars[mtcars$cyl <= 5, ]
mtcars[mtcars$cyl == c(4, 6), ]
mtcars[[1]]
mtcars[["cyl"]]
mod <- lm(mpg ~ wt, data = mtcars)
print(mod)
str(mod)
list(mod)
summary(mod)
str(summary(mod))
mod$r.squared
View(mod)
str(mod)
mo[$r.squared]
summary(mod)
str(summary(mod))
summary(mod$df.residual)
summary(mod$residuals)
(mod$residuals)
sum(mod$residuals)
sum(mod$residuals^2)
sampe(10)
sample(10)
sample(10) < 4
x <- sample(10) < 4
which(x)
x
sample(10)
qplot(cut, clarity, data = diamonds, stat = "sum", group = 1)
library(ggplot2)
qplot(cut, clarity, data = diamonds, stat = "sum", group = 1)
View(diamonds)
library(ramify)
x <-readClipboard()
dim(x)
d <- as.matrix(x)
matrix(x, 205, 8, byrow = TRUE)
matrix(x, 205, 8, byrow = TRUE)
x <-readClipboard()
1688/8
d <- as.matrix(x)
matrix(x, 211, 8, byrow = TRUE)
dc_schools <- matrix(x, 211, 8, byrow = TRUE)
dir()
getwd()
write.csv(dc_schools)
help(write.csv)
write.csv(dc_schools = dc_schools_2015)
write.csv(dc_schools, file = "dc_schools_2015")
write.csv(dc_schools, file = "dc_schools_2015.csv")
install.packages(c("ggmap", "ggplot2", "ggthemes"))
install.packages("knitr")
install.packages("rmarkdown")
---
title: "Untitled"
author: "Tim Essam, GeoCenter"
date: "December 27, 2015"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
require(knitr)
statapath <- "C:/Program Files (x86)/Stata13/StataSE-64.exe"
opts_chunk$set(engine="stata", engine.path=statapath, comment="")
```
```{r}
sysuse auto
summarize
reg price mpg
```
install.packages("rstudioapi", type = "source")
devtools::install_github("rstudio/addinexamples", type = "source")
library("ggmap", lib.loc="~/R/win-library/3.1")
library("ggbiplot", lib.loc="~/R/win-library/3.1")
library("ggthemes", lib.loc="~/R/win-library/3.1")
library("ggvis", lib.loc="~/R/win-library/3.1")
library("ggdendro", lib.loc="~/R/win-library/3.1")
install.packages(c("BH", "broom", "cairoDevice", "classInt", "coda", "coefplot", "curl", "Deducer", "DEoptimR", "devtools", "digest", "directlabels", "doBy", "doParallel", "dygraphs", "effects", "fields", "foreach", "geosphere", "ggmap", "ggthemes", "git2r", "gstat", "Hmisc", "httr", "irlba", "iterators", "jsonlite", "kernlab", "knitr", "latticeExtra", "lme4", "lubridate", "maps", "maptools", "Matrix", "mclust", "memoise", "metricsgraphics", "multcomp", "mvtnorm", "networkD3", "OpenStreetMap", "packrat", "pbkrtest", "pitchRx", "plm", "R.utils", "RandomFields", "RandomFieldsUtils", "randomForest", "raster", "rattle", "Rcpp", "RcppEigen", "rgdal", "rJava", "rmarkdown", "roxygen2", "rvest", "sp", "spacetime", "spam", "spdep", "splancs", "stringi", "testthat", "TH.data", "tidyr", "treemap", "useful", "viridis"))
addinexamples:::subsetAddin()
d <- mpg
data(mpg)
library(ggplot2)
d <- data(mpg)
# Trying ggplots new functionality based on the cheat sheet
d <- data(mpg)
ggplot(d, aes(hwy, cty)) + geom_point(aes(color = cyl)) +
geom_smooth(method = "lm") + coord_cartesian() +
scale_color_gradient() + theme_bw()
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
coord_cartesian() +
scale_color_gradient() +
theme_bw()
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") +
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +
geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
mpg
View(mpg)
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
devtools::install_github("hadley/ggplot2")
library(ggplot)
library(ggplot2)
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
install.packages("devtools")
devtools::install_github("hadley/ggplot2")
library(ggplot2)
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm")
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() +
scale_color_gradient() +
theme_bw()
last_plot()
a + geom_area(stat = "bin")
# Trying ggplots new functionality based on the cheat sheet
ggplot(mpg, aes(hwy, cty)) +   geom_point(aes(color = cyl)) +
geom_smooth(method ="lm") + coord_cartesian() +
scale_color_gradient() +
theme_bw()
# Going through column one
a <- ggplot(mpg, aes(hwy))
a + geom_area(stat = "bin")
a + geom_density(kernel = "gaussian")
a + geom_dotplot()
a + geom_dotplot(color = cyl)
a + geom_dotplot(aes(color = cyl))
a + geom_dotplot(fill = "gray")
a + geom_dotplot(fill = "brown")
a + geom_dotplot(fill = "red")
a + geom_dotplot(fill = "red") + theme_bw
a + geom_dotplot(fill = "red") + theme_bw()
b <- ggplot(mpg, aes(fl))
b + geom_bar()
c + geom_polygon(aes(group = group))
c <- ggplot(map, aes(long, lat))
c + geom_polygon(aes(group = group))
c + geom_polygon(aes(group = group))
c <- ggplot(map, aes(long, lat))
data(map)
data("economics")
b + geom_bar() + geom_rug(sides = "brown")
a + geom_dotplot(fill = "red") + theme_bw() + geom_rug(sides = "brown")
f <- ggplot(mpg, aes(cty, hwy))
f + stat_bin2d(bins = 30, drop = TRUE)
setwd("~/GitHub/UgandaFFP")
dir
dir()
dir(~/Datain)
dir("~/Datain")
# ----------------------------------------------------------------
# Purpose: Process Food For Peace Baseline Data for Uganda Mission
# Author: Tim Essam
# Date: 2016/03/09
# Attribution: USAID GeoCenter / OakStream Systems, LLC
# -----------------------------------------------------------------
# Set up folder structure (clone repo from Github)
# Set up working directory for data
setwd("~/GitHub/UgandaFFP/Datain")
dir()
# ----------------------------------------------------------------
# Purpose: Process Food For Peace Baseline Data for Uganda Mission
# Author: Tim Essam
# Date: 2016/03/09
# Attribution: USAID GeoCenter / OakStream Systems, LLC
# -----------------------------------------------------------------
# Set up folder structure (clone repo from Github)
# Set up working directory for data
library(tidyr)
library(scales)
library(magrittr)
library(haven)
library(ggplot2)
library(dplyr)
setwd("~/GitHub/UgandaFFP/Datain")
dag <- read
# ----------------------------------------------------------------
# Purpose: Process Food For Peace Baseline Data for Uganda Mission
# Author: Tim Essam
# Date: 2016/03/09
# Attribution: USAID GeoCenter / OakStream Systems, LLC
# -----------------------------------------------------------------
# Set up folder structure (clone repo from Github)
# Set up working directory for data
library(tidyr)
library(scales)
library(haven)
library(ggplot2)
library(dplyr)
setwd("~/GitHub/UgandaFFP/Datain")
dir()
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.delim)
# ----------------------------------------------------------------
# Purpose: Process Food For Peace Baseline Data for Uganda Mission
# Author: Tim Essam
# Date: 2016/03/09
# Attribution: USAID GeoCenter / OakStream Systems, LLC
# -----------------------------------------------------------------
# Set up folder structure (clone repo from Github)
# Set up working directory for data
library(tidyr)
library(scales)
library(haven)
library(ggplot2)
library(dplyr)
setwd("~/GitHub/UgandaFFP/Datain")
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv)
myfiles
myfiles[[1]]
names(myfiles[[1]])
dir()
ag <- read.csv("ag.csv")
names(ag)
head(ag)
# ----------------------------------------------------------------
# Purpose: Process Food For Peace Baseline Data for Uganda Mission
# Author: Tim Essam
# Date: 2016/03/09
# Attribution: USAID GeoCenter / OakStream Systems, LLC
# -----------------------------------------------------------------
# Set up folder structure (clone repo from Github)
# Set up working directory for data
library(tidyr)
library(scales)
library(haven)
library(ggplot2)
library(dplyr)
setwd("~/GitHub/UgandaFFP/Datain")
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv)
ag <- tbl_df(read.csv("ag.csv"))
head(ag)
table(ag$DIS)
